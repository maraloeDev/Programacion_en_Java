package com.maraloedev.App;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.TextArea;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;

public class Agenda_Telefonica extends javax.swing.JFrame {

    //Conexion con la base de datos
    static String url = "jdbc:mysql://localhost:3306/agenda";
    static String user = "root";
    static String password = "";

    //Objetos para la manipulación del CRUD
    static PreparedStatement ps;
    static ResultSet rs;

    //Variables
    static String nombreIntroducido;
    static String telefonoIntroducido;
    static ArrayList<String> nombreContactos = new ArrayList<>();

    /**
     * Creates new form Agenda_Telefonica
     */
    public Agenda_Telefonica() {
        initComponents();
        setFrame();
    }

    /**
     * Metodo en el que el JFrame, lo situo en el centro de la pantalla, no
     * permito que el usuario no pueda maximizar la pantalla y por ultimo ambos
     * botones de confirmacion se encuentran deshabilitados.
     */
    private void setFrame() {
        setLocationRelativeTo(null);
        setResizable(false);
        btnAceptar.setEnabled(false);
        btnCancelar.setEnabled(false);
        nombreContacto.setText("");
        telefonoContacto.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Nombre = new javax.swing.JLabel();
        Telefono = new javax.swing.JLabel();
        nombreContacto = new javax.swing.JTextField();
        telefonoContacto = new javax.swing.JTextField();
        btnAceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Contactos = new javax.swing.JMenu();
        Nuevo = new javax.swing.JMenuItem();
        Buscar = new javax.swing.JMenuItem();
        Modificar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Agenda");

        Nombre.setText("Nombre: ");

        Telefono.setText("Telefono:");

        btnAceptar.setText("Aceptar");

        btnCancelar.setText("Cancelar");

        Contactos.setText("Contactos");

        Nuevo.setText("Nuevo");
        Nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoActionPerformed(evt);
            }
        });
        Contactos.add(Nuevo);

        Buscar.setText("Buscar");
        Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarActionPerformed(evt);
            }
        });
        Contactos.add(Buscar);

        Modificar.setText("Modificar");
        Contactos.add(Modificar);

        jMenuBar1.add(Contactos);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Nombre)
                    .addComponent(Telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(telefonoContacto, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(nombreContacto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAceptar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Nombre)
                    .addComponent(nombreContacto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAceptar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Telefono)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(telefonoContacto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCancelar)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoActionPerformed
        creacionContacto();
    }//GEN-LAST:event_NuevoActionPerformed

    private void BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarActionPerformed
        buscarContacto();
    }//GEN-LAST:event_BuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Agenda_Telefonica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Agenda_Telefonica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Agenda_Telefonica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Agenda_Telefonica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Agenda_Telefonica().setVisible(true);
        });
    }

    /**
     * Metodo que activa los botones, almaceno el nombre y el telefono
     * introducido por el usuario, creo un evento en que si el usuario hace
     * click en aceptar,
     * se comprobaran que los datos introducidos de la siguiente manera:
     *      - Si alguno de los componentes de texto esta vacio se lanzara una ex 
     *      - Si la longitud del numero de telefono, es diferente de 9 [190-201]
     * 
     * Una vez comprobado que todo esta correcto, se procedera a la creacion de
     * la consulta, haciendo una inserción en la base de datos, dando valor a
     * los ? con los valores introducidos por el usuario, una vez indicados los
     * valores, se notificara al usuario, que el contato a sigo agregado en la
     * agenda [203-215]
     * 
     * Si el usuario da click en el boton Cancelar,
     * se llamara al metodo setFrame()[42-47] .
     *
     */
    private void creacionContacto() {
        nombreContacto.setText("");
        telefonoContacto.setText("");
        btnAceptar.setEnabled(true);
        btnCancelar.setEnabled(true);

        btnAceptar.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                nombreIntroducido = nombreContacto.getText();
                telefonoIntroducido = telefonoContacto.getText();

                if (nombreIntroducido.isEmpty() || telefonoIntroducido.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Los campos no deben estar vacios", "Error 0X00001", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (telefonoIntroducido.length() != 9) {
                    JOptionPane.showMessageDialog(null, "El número de telefono tiene que tener 9 digitos", "Error 0X00002", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                try (Connection conn = conexionBD()) {
                    ps = conn.prepareStatement(
                            "INSERT INTO contactos"
                            + "(nombre,tf) "
                            + "VALUES(?,?)");

                    ps.setString(1, nombreIntroducido);
                    ps.setString(2, telefonoIntroducido);
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Contacto almacenado");
                } catch (SQLException ex) {
                    Logger.getLogger(Agenda_Telefonica.class.getName()).log(Level.SEVERE, null, ex);
                }
                setFrame();
            }
        });

        btnCancelar.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                setFrame();
            }
        });
    }
    
    /**
     * Metodo en el que se almacenan en una lista los nombres 
     * de los contactos, se intenta conectar a la BD, creo la consulta para 
     * seleccionar todos los nombres, ejecuto la consulta, y mientras haya mas
     * datos, almaceno el idContacto, el nombre y el telefono, creo en un objeto
     * contacto para almacenar lo recuperado del rs, y agrego a la lista recupe-
     * rando solamete el nombre [265-276]
     * 
     * Almaceno la variable seleccionUsuario un InputDialog en el que se mostra-
     * ra en un comboBox, los valores almacenados en la lista, despues compruebo
     * si lo seleccionado en el comboBox es diferente de nulo, de ser asi,
     * se llamara al metodo datosContacto [283-293].
     */
    private void buscarContacto() {
        nombreContactos = new ArrayList<>();
        try (Connection conn = conexionBD()) {
            String nombre = null;
            ps = conn.prepareStatement("SELECT * FROM contactos");
            rs = ps.executeQuery();
            while (rs.next()) {
                int idContacto = rs.getInt("idContacto");
                nombre = rs.getString("nombre");
                String telefono = rs.getString("tf");
                Contactos c = new Contactos(idContacto, nombre, telefono);
                nombreContactos.add(c.getNombre());
            }
            
            String seleccionUsuario = (String) JOptionPane.showInputDialog(
                    null,
                    "Nombre del contacto:",
                    "Buscar contacto",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    nombreContactos.toArray(),
                    null);
            if (seleccionUsuario != null) {
                datosContacto(seleccionUsuario);   
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(Agenda_Telefonica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Metodo en el que se le pasa el parametro el nombre del contacto a mostrar
     * Creo una ventana, que contiene como titulo el nombre del contacto selec-
     * cionado anteriormente en el ComboBox, establezco un tamaño para la venta-
     * na, la posiciono en el medio e impido que el usuario la pueda maximizar
     * Creo un TextArea que el usuario no puede editar [308-314].
     * 
     * Intento conectarme a la base de datos, creo la consulta recogiendo todo,
     * donde el nombre sea el pasado por parametro, doy valor al ?, y mientras
     * haya mas datos, almacenare en variables los datos del contacto, y mostra-
     * re en el TextArea, los datos valores del contacto seleccionado, lo muest-
     * o en la ventana y la hago visible [322-341]
     */
    private void datosContacto(String nombre) {
    JFrame ventanaDatos = new JFrame("Datos de " + nombre);
    ventanaDatos.setSize(new Dimension(400, 200));
    ventanaDatos.setLocationRelativeTo(null);
    ventanaDatos.setResizable(false);

    TextArea infoContacto = new TextArea();
    infoContacto.setEditable(false);

    try (Connection con = conexionBD()) {
        ps = con.prepareStatement("SELECT * FROM contactos WHERE nombre = ?");
        ps.setString(1, nombre);
        rs = ps.executeQuery();

        while (rs.next()) {
            int idContacto = rs.getInt("idContacto");
            nombre = rs.getString("nombre");
            String telefono = rs.getString("tf");
            Contactos contacto = new Contactos(idContacto, nombre, telefono);
            infoContacto.setText(contacto.toString());
        }

    } catch (SQLException ex) {
        Logger.getLogger(Agenda_Telefonica.class.getName()).log(Level.SEVERE, null, ex);
        infoContacto.setText("Error al buscar contacto.");
    }

    ventanaDatos.add(infoContacto);
    ventanaDatos.setVisible(true);
}
    
    

    /**
     * Metodo en el que se devuelven las credenciales de la base de datos para
     * la manipulacion de datos.
     */
    private Connection conexionBD() throws SQLException {
        return DriverManager.getConnection(url, user, password);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Buscar;
    private javax.swing.JMenu Contactos;
    private javax.swing.JMenuItem Modificar;
    private javax.swing.JLabel Nombre;
    private javax.swing.JMenuItem Nuevo;
    private javax.swing.JLabel Telefono;
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JTextField nombreContacto;
    private javax.swing.JTextField telefonoContacto;
    // End of variables declaration//GEN-END:variables
}
