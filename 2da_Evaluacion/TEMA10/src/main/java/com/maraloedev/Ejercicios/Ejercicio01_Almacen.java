package com.maraloedev.Ejercicios;

import com.maraloedev.clases.Productos;
import com.maraloedev.clases.TiposProducto;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class Ejercicio01_Almacen extends javax.swing.JFrame {

    //modelos de combo y lista
    static DefaultComboBoxModel modeloCombo = new DefaultComboBoxModel();
    static DefaultListModel modeloLista = new DefaultListModel();

    //Conexion a la base de datos
    static String url = "jdbc:mysql://localhost:3306/almacen";
    static String user = "root";
    static String password = "";

    //objetos base de datos
    static PreparedStatement ps;
    static ResultSet rs;
    
    static Productos p;

    static int tipoProducto = 0;

    /**
     * Creates new form Ejercicio01_Almacen
     */
    public Ejercicio01_Almacen() {
        initComponents();
        setFrame();
        components();
    }

    private void setFrame() {
        setLocationRelativeTo(null);
        setResizable(false);
    }

    private void components() {
        comboProductos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboProductos = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaProductos = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Almacén");

        jLabel1.setText("Tipo producto:");

        comboProductos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboProductosItemStateChanged(evt);
            }
        });

        listaProductos.setBorder(javax.swing.BorderFactory.createTitledBorder("Listado de productos"));
        listaProductos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaProductosValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listaProductos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(comboProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboProductosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboProductosItemStateChanged
        listaProductos();
    }//GEN-LAST:event_comboProductosItemStateChanged

    private void listaProductosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaProductosValueChanged
        unidadesAlmacen();
    }//GEN-LAST:event_listaProductosValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ejercicio01_Almacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ejercicio01_Almacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ejercicio01_Almacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ejercicio01_Almacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Ejercicio01_Almacen().setVisible(true);
        });
    }

    private void comboProductos() {
        comboProductos.setModel(modeloCombo);
        try (Connection conn = conexionBD()) {
            ps = conn.prepareStatement("SELECT * FROM tiposProducto");
            rs = ps.executeQuery();
            modeloCombo.addElement("(elige uno)");
            while (rs.next()) {
                int idTipo = rs.getInt("idTipo");
                char tipo = rs.getString("tipo").charAt(0);
                TiposProducto tp = new TiposProducto(idTipo, tipo);
                modeloCombo.addElement(tp);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Ejercicio01_Almacen.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void listaProductos() {
        listaProductos.setModel(modeloLista);
        modeloLista.clear();
        try (Connection conn = conexionBD()) {
            ps = conn.prepareStatement("SELECT * FROM productos WHERE tipo = ?");
            String itemSeleccionado = modeloCombo.getSelectedItem().toString();
            if (itemSeleccionado.equals("(elige uno)")) {
                JOptionPane.showMessageDialog(null, "Selecciona un tipo de producto");
                return;
            }

           TiposProducto seleccionado = (TiposProducto) modeloCombo.getSelectedItem();
            tipoProducto = seleccionado.getIdTipo();  // ¡sin necesidad de switch!


            //Doy valor al interrogante
            ps.setInt(1, tipoProducto);
            rs = ps.executeQuery();

            while (rs.next()) {
                int idProducto = rs.getInt("idProducto");
                String descripcion = rs.getString("descripcion");
                Double precio = rs.getDouble("precio");
                int cantidad = rs.getInt("cantidad");
                int tipo = rs.getInt("tipo");
                p = new Productos(idProducto, descripcion, precio, cantidad, tipo);
                modeloLista.addElement(p.toString());
            }

        } catch (SQLException ex) {
            Logger.getLogger(Ejercicio01_Almacen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void unidadesAlmacen() {
    try (Connection conn = conexionBD()) {
        ps = conn.prepareStatement("SELECT cantidad FROM productos WHERE tipo = ?");
        ps.setInt(1, tipoProducto); // Usamos el ID único del producto

        rs = ps.executeQuery();
        
        while (rs.next()) {
            
        if(rs.next()) {
            int cantidad = rs.getInt("cantidad");
            if (cantidad < 10) {
                JOptionPane.showMessageDialog(null, "Nº Unidades: " + cantidad + "\nDebajo del stock de seguridad");
            } else {
                JOptionPane.showMessageDialog(null, "Nº Unidades: " + cantidad);
            }
        }
        }


        rs.close();
        ps.close();
    } catch (SQLException ex) {
        Logger.getLogger(Ejercicio01_Almacen.class.getName()).log(Level.SEVERE, null, ex);
    }
}



    private Connection conexionBD() throws SQLException {
        return DriverManager.getConnection(url, user, password);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboProductos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listaProductos;
    // End of variables declaration//GEN-END:variables

}
